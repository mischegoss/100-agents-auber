const { Octokit } = require('@octokit/rest')
const path = require('path')

class GitHubPRTool {
  constructor() {
    this.name = 'github-pr-tool'
    this.description =
      'Creates pull requests for RAG documentation enhancements'

    // Initialize Octokit with token from environment
    this.octokit = new Octokit({
      auth: process.env.GITHUB_TOKEN,
    })

    // Get repo info from package.json or environment
    this.owner = process.env.GITHUB_OWNER || 'mischegoss' // Replace with your GitHub username
    this.repo = process.env.GITHUB_REPO || '100-agents-auber' // Replace with your repo name
  }

  /**
   * Create a PR with enhanced documentation files
   */
  async createEnhancementPR(enhancements, summary) {
    console.log('üîÄ [GitHub PR] Creating enhancement pull request...')

    try {
      // 1. Get the default branch (usually 'main' or 'master')
      const { data: repoData } = await this.octokit.rest.repos.get({
        owner: this.owner,
        repo: this.repo,
      })
      const defaultBranch = repoData.default_branch

      // 2. Get the latest commit SHA from default branch
      const { data: refData } = await this.octokit.rest.git.getRef({
        owner: this.owner,
        repo: this.repo,
        ref: `heads/${defaultBranch}`,
      })
      const latestCommitSha = refData.object.sha

      // 3. Create a new branch for our enhancements
      const branchName = `rag-enhancements-${Date.now()}`
      await this.octokit.rest.git.createRef({
        owner: this.owner,
        repo: this.repo,
        ref: `refs/heads/${branchName}`,
        sha: latestCommitSha,
      })

      console.log(`üìù [GitHub PR] Created branch: ${branchName}`)

      // 4. Create commits for each enhanced file
      for (const enhancement of enhancements) {
        if (enhancement.success) {
          await this.commitEnhancedFile(branchName, enhancement)
        }
      }

      // 5. Create the pull request
      const prTitle = `ü§ñ RAG Documentation Enhancement - ${summary.successful} files improved`
      const prBody = this.generatePRDescription(enhancements, summary)

      const { data: prData } = await this.octokit.rest.pulls.create({
        owner: this.owner,
        repo: this.repo,
        title: prTitle,
        head: branchName,
        base: defaultBranch,
        body: prBody,
      })

      console.log(
        `‚úÖ [GitHub PR] Created PR #${prData.number}: ${prData.html_url}`,
      )

      return {
        success: true,
        prNumber: prData.number,
        prUrl: prData.html_url,
        branch: branchName,
      }
    } catch (error) {
      console.error('‚ùå [GitHub PR] Error creating PR:', error.message)
      return {
        success: false,
        error: error.message,
      }
    }
  }

  /**
   * Commit an enhanced file to the branch
   */
  async commitEnhancedFile(branchName, enhancement) {
    try {
      const fs = require('fs-extra')

      // Read the enhanced file content
      const enhancedContent = await fs.readFile(enhancement.filePath, 'utf8')

      // Convert absolute path to relative path for GitHub
      const relativePath = path.relative(process.cwd(), enhancement.filePath)

      // Get current file content to compare
      let currentFileSha = null
      try {
        const { data: currentFile } = await this.octokit.rest.repos.getContent({
          owner: this.owner,
          repo: this.repo,
          path: relativePath,
          ref: branchName,
        })
        currentFileSha = currentFile.sha
      } catch (error) {
        // File might not exist, that's okay
        console.log(`üìÑ [GitHub PR] New file: ${relativePath}`)
      }

      // Create or update the file
      await this.octokit.rest.repos.createOrUpdateFileContents({
        owner: this.owner,
        repo: this.repo,
        path: relativePath,
        message: `ü§ñ Enhance ${path.basename(
          enhancement.filePath,
        )} with RAG metadata`,
        content: Buffer.from(enhancedContent).toString('base64'),
        branch: branchName,
        ...(currentFileSha && { sha: currentFileSha }),
      })

      console.log(`üì§ [GitHub PR] Committed: ${relativePath}`)
    } catch (error) {
      console.error(
        `‚ùå [GitHub PR] Error committing ${enhancement.filePath}:`,
        error.message,
      )
    }
  }

  /**
   * Generate comprehensive PR description
   */
  generatePRDescription(enhancements, summary) {
    const successful = enhancements.filter(e => e.success)
    const failed = enhancements.filter(e => !e.success)

    let description = `## ü§ñ Automated RAG Documentation Enhancement

This PR was automatically generated by the RAG Prep Plugin to optimize documentation for better search and retrieval.

### üìä Enhancement Summary
- **Files Enhanced**: ${summary.successful}/${summary.totalFiles}
- **Average RAG Score**: ${summary.averageRagScore}/100
- **Enhancement Rate**: ${Math.round(
      (summary.successful / summary.totalFiles) * 100,
    )}%

### üéØ Improvements Made
`

    // Add improvement breakdown
    if (summary.topImprovements) {
      summary.topImprovements.forEach(improvement => {
        description += `- **${improvement.type}**: Applied to ${improvement.count} files\n`
      })
    }

    description += `
### üìÅ Files Enhanced
`

    // List enhanced files with their improvements
    successful.forEach(enhancement => {
      const fileName = path.basename(enhancement.filePath)
      const improvements = enhancement.addedFields || []

      description += `
#### üìÑ \`${fileName}\`
- **Added Fields**: ${improvements.join(', ') || 'Metadata updates'}
- **RAG Score**: ${enhancement.enhancedMetadata?.ragScore || 'N/A'}/100
`
    })

    if (failed.length > 0) {
      description += `
### ‚ö†Ô∏è Files with Issues
`
      failed.forEach(enhancement => {
        description += `- \`${path.basename(enhancement.filePath)}\`: ${
          enhancement.error
        }\n`
      })
    }

    description += `
### üîç How This Improves RAG Performance
- **Better Search**: Enhanced keywords and descriptions improve discoverability
- **Richer Context**: Topic categorization helps AI understand content relationships  
- **Query Optimization**: User intent metadata improves search relevance
- **Technical Context**: Stack and API metadata enables precise technical assistance

### ‚úÖ Review Checklist
- [ ] Review enhanced frontmatter for accuracy
- [ ] Verify topic categorizations are appropriate
- [ ] Check that related document links are correct
- [ ] Confirm technical metadata is up-to-date

---
*This enhancement was generated by [RAG Prep Plugin](https://github.com/yourusername/docusaurus-rag-prep-plugin)*
`

    return description
  }
}

module.exports = GitHubPRTool
